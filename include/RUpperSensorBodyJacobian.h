// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: BodyJacobian
 *
 * Args:
 *     joint_angles: Matrix71
 *
 * Outputs:
 *     res: Matrix67
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 7> Ruppersensorbodyjacobian(
    const Eigen::Matrix<Scalar, 7, 1>& joint_angles) {
  // Total ops: 264

  // Input arrays

  // Intermediate terms (59)
  const Scalar _tmp0 = std::cos(joint_angles(2, 0));
  const Scalar _tmp1 = 1 - std::cos(joint_angles(0, 0));
  const Scalar _tmp2 = Scalar(0.36863892073799998) * _tmp1;
  const Scalar _tmp3 = std::sin(joint_angles(0, 0));
  const Scalar _tmp4 = Scalar(0.47771400000000003) * _tmp3;
  const Scalar _tmp5 = _tmp2 + _tmp4;
  const Scalar _tmp6 = 1 - std::cos(joint_angles(1, 0));
  const Scalar _tmp7 = 1 - Scalar(0.64784630232100004) * _tmp6;
  const Scalar _tmp8 = 1 - Scalar(0.728210975245) * _tmp1;
  const Scalar _tmp9 = Scalar(0.47764205971399998) * _tmp6;
  const Scalar _tmp10 = std::sin(joint_angles(1, 0));
  const Scalar _tmp11 = Scalar(0.249048550476) * _tmp1;
  const Scalar _tmp12 = Scalar(0.70710700000000004) * _tmp3;
  const Scalar _tmp13 = _tmp11 - _tmp12;
  const Scalar _tmp14 = _tmp10 * _tmp13;
  const Scalar _tmp15 = Scalar(0.80488899999999997) * _tmp14 + _tmp5 * _tmp7 - _tmp8 * _tmp9;
  const Scalar _tmp16 = 1 - Scalar(0.35215441747600001) * _tmp6;
  const Scalar _tmp17 = Scalar(0.59342600000000001) * _tmp14 + _tmp16 * _tmp8 - _tmp5 * _tmp9;
  const Scalar _tmp18 = std::sin(joint_angles(2, 0));
  const Scalar _tmp19 = _tmp0 * _tmp15 - _tmp17 * _tmp18;
  const Scalar _tmp20 = Scalar(0.337794913398) * _tmp1;
  const Scalar _tmp21 = Scalar(0.52133399999999996) * _tmp3;
  const Scalar _tmp22 = _tmp20 - _tmp21;
  const Scalar _tmp23 = 1 - Scalar(0.77178944900500002) * _tmp1;
  const Scalar _tmp24 = Scalar(0.80488899999999997) * _tmp10;
  const Scalar _tmp25 = _tmp11 + _tmp12;
  const Scalar _tmp26 = _tmp22 * _tmp7 + _tmp23 * _tmp24 - _tmp25 * _tmp9;
  const Scalar _tmp27 = Scalar(0.59342600000000001) * _tmp10;
  const Scalar _tmp28 = _tmp16 * _tmp25 - _tmp22 * _tmp9 + _tmp23 * _tmp27;
  const Scalar _tmp29 = _tmp0 * _tmp26 - _tmp18 * _tmp28;
  const Scalar _tmp30 = _tmp0 * _tmp28 + _tmp18 * _tmp26;
  const Scalar _tmp31 = 1 - Scalar(1.000000719797) * _tmp6;
  const Scalar _tmp32 = -_tmp22 * _tmp24 + _tmp23 * _tmp31 - _tmp25 * _tmp27;
  const Scalar _tmp33 = Scalar(0.046719999999999998) * _tmp29 - Scalar(0.01115) * _tmp30 -
                        Scalar(0.20200000000000001) * _tmp32;
  const Scalar _tmp34 = _tmp0 * _tmp17 + _tmp15 * _tmp18;
  const Scalar _tmp35 = _tmp13 * _tmp31 - _tmp24 * _tmp5 - _tmp27 * _tmp8;
  const Scalar _tmp36 = Scalar(0.046719999999999998) * _tmp19 - Scalar(0.01115) * _tmp34 -
                        Scalar(0.20200000000000001) * _tmp35;
  const Scalar _tmp37 = 1 - Scalar(0.499999805352) * _tmp1;
  const Scalar _tmp38 = _tmp20 + _tmp21;
  const Scalar _tmp39 = _tmp2 - _tmp4;
  const Scalar _tmp40 = _tmp24 * _tmp38 + _tmp37 * _tmp7 - _tmp39 * _tmp9;
  const Scalar _tmp41 = _tmp16 * _tmp39 + _tmp27 * _tmp38 - _tmp37 * _tmp9;
  const Scalar _tmp42 = _tmp0 * _tmp40 - _tmp18 * _tmp41;
  const Scalar _tmp43 = -_tmp24 * _tmp37 - _tmp27 * _tmp39 + _tmp31 * _tmp38;
  const Scalar _tmp44 = _tmp0 * _tmp41 + _tmp18 * _tmp40;
  const Scalar _tmp45 = Scalar(0.046719999999999998) * _tmp42 -
                        Scalar(0.20200000000000001) * _tmp43 - Scalar(0.01115) * _tmp44;
  const Scalar _tmp46 = _tmp0 * _tmp27 + _tmp18 * _tmp24;
  const Scalar _tmp47 = _tmp0 * _tmp24 - _tmp18 * _tmp27;
  const Scalar _tmp48 = -Scalar(0.20200000000000001) * _tmp31 - Scalar(0.01115) * _tmp46 +
                        Scalar(0.046719999999999998) * _tmp47;
  const Scalar _tmp49 = -_tmp0 * _tmp9;
  const Scalar _tmp50 = -_tmp16 * _tmp18 + _tmp49;
  const Scalar _tmp51 = _tmp18 * _tmp9;
  const Scalar _tmp52 = _tmp0 * _tmp16 - _tmp51;
  const Scalar _tmp53 = Scalar(0.11987205200000001) * _tmp10 +
                        Scalar(0.046719999999999998) * _tmp50 - Scalar(0.01115) * _tmp52;
  const Scalar _tmp54 = _tmp18 * _tmp7 + _tmp49;
  const Scalar _tmp55 = _tmp0 * _tmp7 + _tmp51;
  const Scalar _tmp56 = Scalar(0.16258757800000001) * _tmp10 - Scalar(0.01115) * _tmp54 +
                        Scalar(0.046719999999999998) * _tmp55;
  const Scalar _tmp57 = -Scalar(0.01115) * _tmp0 - Scalar(0.046719999999999998) * _tmp18;
  const Scalar _tmp58 = Scalar(0.046719999999999998) * _tmp0 - Scalar(0.01115) * _tmp18;

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 7> _res;

  _res.setZero();

  _res(0, 0) = -Scalar(0.70710700000000004) * _tmp19 * _tmp33 +
               Scalar(0.47771400000000003) * _tmp19 * _tmp45 +
               Scalar(0.70710700000000004) * _tmp29 * _tmp36 -
               Scalar(0.52133399999999996) * _tmp29 * _tmp45 +
               Scalar(0.52133399999999996) * _tmp33 * _tmp42 -
               Scalar(0.47771400000000003) * _tmp36 * _tmp42;
  _res(1, 0) = Scalar(0.70710700000000004) * _tmp30 * _tmp36 -
               Scalar(0.52133399999999996) * _tmp30 * _tmp45 -
               Scalar(0.70710700000000004) * _tmp33 * _tmp34 +
               Scalar(0.52133399999999996) * _tmp33 * _tmp44 +
               Scalar(0.47771400000000003) * _tmp34 * _tmp45 -
               Scalar(0.47771400000000003) * _tmp36 * _tmp44;
  _res(2, 0) = Scalar(0.70710700000000004) * _tmp32 * _tmp36 -
               Scalar(0.52133399999999996) * _tmp32 * _tmp45 -
               Scalar(0.70710700000000004) * _tmp33 * _tmp35 +
               Scalar(0.52133399999999996) * _tmp33 * _tmp43 +
               Scalar(0.47771400000000003) * _tmp35 * _tmp45 -
               Scalar(0.47771400000000003) * _tmp36 * _tmp43;
  _res(3, 0) = Scalar(0.52133399999999996) * _tmp19 + Scalar(0.47771400000000003) * _tmp29 +
               Scalar(0.70710700000000004) * _tmp42;
  _res(4, 0) = Scalar(0.47771400000000003) * _tmp30 + Scalar(0.52133399999999996) * _tmp34 +
               Scalar(0.70710700000000004) * _tmp44;
  _res(5, 0) = Scalar(0.47771400000000003) * _tmp32 + Scalar(0.52133399999999996) * _tmp35 +
               Scalar(0.70710700000000004) * _tmp43;
  _res(0, 1) = Scalar(0.59342600000000001) * _tmp47 * _tmp53 +
               Scalar(0.80488899999999997) * _tmp47 * _tmp56 -
               Scalar(0.59342600000000001) * _tmp48 * _tmp50 -
               Scalar(0.80488899999999997) * _tmp48 * _tmp55;
  _res(1, 1) = Scalar(0.59342600000000001) * _tmp46 * _tmp53 +
               Scalar(0.80488899999999997) * _tmp46 * _tmp56 -
               Scalar(0.59342600000000001) * _tmp48 * _tmp52 -
               Scalar(0.80488899999999997) * _tmp48 * _tmp54;
  _res(2, 1) = Scalar(0.80488899999999997) * _tmp24 * _tmp48 +
               Scalar(0.59342600000000001) * _tmp27 * _tmp48 +
               Scalar(0.59342600000000001) * _tmp31 * _tmp53 +
               Scalar(0.80488899999999997) * _tmp31 * _tmp56;
  _res(3, 1) = -Scalar(0.80488899999999997) * _tmp50 + Scalar(0.59342600000000001) * _tmp55;
  _res(4, 1) = -Scalar(0.80488899999999997) * _tmp52 + Scalar(0.59342600000000001) * _tmp54;
  _res(0, 2) = _tmp0 * _tmp57 + _tmp18 * _tmp58;
  _res(1, 2) = -_tmp0 * _tmp58 + _tmp18 * _tmp57;
  _res(5, 2) = -1;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
