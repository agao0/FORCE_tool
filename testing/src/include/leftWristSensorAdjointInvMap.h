// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: adjointInvMap
 *
 * Args:
 *     joint_angles: Matrix71
 *
 * Outputs:
 *     res: Matrix66
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 6> Leftwristsensoradjointinvmap(
    const Eigen::Matrix<Scalar, 7, 1>& joint_angles) {
  // Total ops: 262

  // Input arrays

  // Intermediate terms (89)
  const Scalar _tmp0 = std::sin(joint_angles(4, 0));
  const Scalar _tmp1 = std::cos(joint_angles(3, 0));
  const Scalar _tmp2 = std::cos(joint_angles(2, 0));
  const Scalar _tmp3 = 1 - std::cos(joint_angles(0, 0));
  const Scalar _tmp4 = 1 - Scalar(0.499999805352) * _tmp3;
  const Scalar _tmp5 = 1 - std::cos(joint_angles(1, 0));
  const Scalar _tmp6 = Scalar(0.47764205971399998) * _tmp5;
  const Scalar _tmp7 = Scalar(0.36863892073799998) * _tmp3;
  const Scalar _tmp8 = std::sin(joint_angles(0, 0));
  const Scalar _tmp9 = Scalar(0.47771400000000003) * _tmp8;
  const Scalar _tmp10 = _tmp7 - _tmp9;
  const Scalar _tmp11 = 1 - Scalar(0.35215441747600001) * _tmp5;
  const Scalar _tmp12 = Scalar(0.337794913398) * _tmp3;
  const Scalar _tmp13 = Scalar(0.52133399999999996) * _tmp8;
  const Scalar _tmp14 = _tmp12 + _tmp13;
  const Scalar _tmp15 = std::sin(joint_angles(1, 0));
  const Scalar _tmp16 = Scalar(0.59342600000000001) * _tmp15;
  const Scalar _tmp17 = _tmp10 * _tmp11 + _tmp14 * _tmp16 - _tmp4 * _tmp6;
  const Scalar _tmp18 = 1 - Scalar(0.64784630232100004) * _tmp5;
  const Scalar _tmp19 = Scalar(0.80488899999999997) * _tmp15;
  const Scalar _tmp20 = -_tmp10 * _tmp6 + _tmp14 * _tmp19 + _tmp18 * _tmp4;
  const Scalar _tmp21 = std::sin(joint_angles(2, 0));
  const Scalar _tmp22 = _tmp17 * _tmp2 + _tmp20 * _tmp21;
  const Scalar _tmp23 = 1 - Scalar(1.000000719797) * _tmp5;
  const Scalar _tmp24 = -_tmp10 * _tmp16 + _tmp14 * _tmp23 - _tmp19 * _tmp4;
  const Scalar _tmp25 = std::sin(joint_angles(3, 0));
  const Scalar _tmp26 = _tmp1 * _tmp22 + _tmp24 * _tmp25;
  const Scalar _tmp27 = std::cos(joint_angles(4, 0));
  const Scalar _tmp28 = -_tmp17 * _tmp21 + _tmp2 * _tmp20;
  const Scalar _tmp29 = -_tmp0 * _tmp26 + _tmp27 * _tmp28;
  const Scalar _tmp30 = std::cos(joint_angles(5, 0));
  const Scalar _tmp31 = _tmp22 * _tmp25;
  const Scalar _tmp32 = _tmp1 * _tmp24 - _tmp31;
  const Scalar _tmp33 = std::sin(joint_angles(5, 0));
  const Scalar _tmp34 = _tmp29 * _tmp30 - _tmp32 * _tmp33;
  const Scalar _tmp35 = _tmp29 * _tmp33;
  const Scalar _tmp36 = _tmp30 * _tmp32 + _tmp35;
  const Scalar _tmp37 = std::sin(joint_angles(6, 0));
  const Scalar _tmp38 = _tmp0 * _tmp28 + _tmp26 * _tmp27;
  const Scalar _tmp39 = std::cos(joint_angles(6, 0));
  const Scalar _tmp40 = _tmp36 * _tmp37 + _tmp38 * _tmp39;
  const Scalar _tmp41 = _tmp37 * _tmp38;
  const Scalar _tmp42 = _tmp36 * _tmp39 - _tmp41;
  const Scalar _tmp43 = _tmp7 + _tmp9;
  const Scalar _tmp44 = 1 - Scalar(0.728210975245) * _tmp3;
  const Scalar _tmp45 = Scalar(0.249048550476) * _tmp3;
  const Scalar _tmp46 = Scalar(0.70710700000000004) * _tmp8;
  const Scalar _tmp47 = _tmp45 - _tmp46;
  const Scalar _tmp48 = _tmp18 * _tmp43 + _tmp19 * _tmp47 - _tmp44 * _tmp6;
  const Scalar _tmp49 = _tmp11 * _tmp44 + _tmp16 * _tmp47 - _tmp43 * _tmp6;
  const Scalar _tmp50 = _tmp2 * _tmp48 - _tmp21 * _tmp49;
  const Scalar _tmp51 = _tmp2 * _tmp49 + _tmp21 * _tmp48;
  const Scalar _tmp52 = -_tmp16 * _tmp44 - _tmp19 * _tmp43 + _tmp23 * _tmp47;
  const Scalar _tmp53 = _tmp1 * _tmp51 + _tmp25 * _tmp52;
  const Scalar _tmp54 = -_tmp0 * _tmp53 + _tmp27 * _tmp50;
  const Scalar _tmp55 = _tmp25 * _tmp51;
  const Scalar _tmp56 = _tmp1 * _tmp52 - _tmp55;
  const Scalar _tmp57 = _tmp30 * _tmp54 - _tmp33 * _tmp56;
  const Scalar _tmp58 = _tmp33 * _tmp54;
  const Scalar _tmp59 = _tmp30 * _tmp56 + _tmp58;
  const Scalar _tmp60 = _tmp0 * _tmp50 + _tmp27 * _tmp53;
  const Scalar _tmp61 = _tmp37 * _tmp59 + _tmp39 * _tmp60;
  const Scalar _tmp62 = _tmp37 * _tmp60;
  const Scalar _tmp63 = _tmp39 * _tmp59 - _tmp62;
  const Scalar _tmp64 = _tmp12 - _tmp13;
  const Scalar _tmp65 = 1 - Scalar(0.77178944900500002) * _tmp3;
  const Scalar _tmp66 = _tmp45 + _tmp46;
  const Scalar _tmp67 = _tmp18 * _tmp64 + _tmp19 * _tmp65 - _tmp6 * _tmp66;
  const Scalar _tmp68 = _tmp11 * _tmp66 + _tmp16 * _tmp65 - _tmp6 * _tmp64;
  const Scalar _tmp69 = _tmp2 * _tmp68 + _tmp21 * _tmp67;
  const Scalar _tmp70 = -_tmp16 * _tmp66 - _tmp19 * _tmp64 + _tmp23 * _tmp65;
  const Scalar _tmp71 = _tmp1 * _tmp69 + _tmp25 * _tmp70;
  const Scalar _tmp72 = _tmp2 * _tmp67 - _tmp21 * _tmp68;
  const Scalar _tmp73 = -_tmp0 * _tmp71 + _tmp27 * _tmp72;
  const Scalar _tmp74 = _tmp25 * _tmp69;
  const Scalar _tmp75 = _tmp1 * _tmp70 - _tmp74;
  const Scalar _tmp76 = _tmp30 * _tmp73 - _tmp33 * _tmp75;
  const Scalar _tmp77 = _tmp33 * _tmp73;
  const Scalar _tmp78 = _tmp30 * _tmp75 + _tmp77;
  const Scalar _tmp79 = _tmp0 * _tmp72 + _tmp27 * _tmp71;
  const Scalar _tmp80 = _tmp37 * _tmp78 + _tmp39 * _tmp79;
  const Scalar _tmp81 = _tmp37 * _tmp79;
  const Scalar _tmp82 = _tmp39 * _tmp78 - _tmp81;
  const Scalar _tmp83 = Scalar(0.58030000000000004) - Scalar(0.58030000000000004) * _tmp30;
  const Scalar _tmp84 = Scalar(0.58030000000000004) - Scalar(0.58030000000000004) * _tmp39;
  const Scalar _tmp85 = Scalar(0.30359999999999998) - Scalar(0.30359999999999998) * _tmp1;
  const Scalar _tmp86 = -_tmp52 * _tmp85 - Scalar(0.30359999999999998) * _tmp55 - _tmp56 * _tmp83 -
                        Scalar(0.040910000000000002) * _tmp57 +
                        Scalar(0.58030000000000004) * _tmp58 - _tmp59 * _tmp84 +
                        Scalar(0.023210000000000001) * _tmp61 -
                        Scalar(0.58030000000000004) * _tmp62 - Scalar(0.63) * _tmp63;
  const Scalar _tmp87 = -_tmp70 * _tmp85 - Scalar(0.30359999999999998) * _tmp74 - _tmp75 * _tmp83 -
                        Scalar(0.040910000000000002) * _tmp76 +
                        Scalar(0.58030000000000004) * _tmp77 - _tmp78 * _tmp84 +
                        Scalar(0.023210000000000001) * _tmp80 -
                        Scalar(0.58030000000000004) * _tmp81 - Scalar(0.63) * _tmp82;
  const Scalar _tmp88 = -_tmp24 * _tmp85 - Scalar(0.30359999999999998) * _tmp31 - _tmp32 * _tmp83 -
                        Scalar(0.040910000000000002) * _tmp34 +
                        Scalar(0.58030000000000004) * _tmp35 - _tmp36 * _tmp84 +
                        Scalar(0.023210000000000001) * _tmp40 -
                        Scalar(0.58030000000000004) * _tmp41 - Scalar(0.63) * _tmp42;

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 6> _res;

  _res(0, 0) = _tmp34;
  _res(1, 0) = _tmp40;
  _res(2, 0) = _tmp42;
  _res(3, 0) = 0;
  _res(4, 0) = 0;
  _res(5, 0) = 0;
  _res(0, 1) = _tmp57;
  _res(1, 1) = _tmp61;
  _res(2, 1) = _tmp63;
  _res(3, 1) = 0;
  _res(4, 1) = 0;
  _res(5, 1) = 0;
  _res(0, 2) = _tmp76;
  _res(1, 2) = _tmp80;
  _res(2, 2) = _tmp82;
  _res(3, 2) = 0;
  _res(4, 2) = 0;
  _res(5, 2) = 0;
  _res(0, 3) = -_tmp57 * _tmp87 + _tmp76 * _tmp86;
  _res(1, 3) = -_tmp61 * _tmp87 + _tmp80 * _tmp86;
  _res(2, 3) = -_tmp63 * _tmp87 + _tmp82 * _tmp86;
  _res(3, 3) = _tmp34;
  _res(4, 3) = _tmp40;
  _res(5, 3) = _tmp42;
  _res(0, 4) = _tmp34 * _tmp87 - _tmp76 * _tmp88;
  _res(1, 4) = _tmp40 * _tmp87 - _tmp80 * _tmp88;
  _res(2, 4) = _tmp42 * _tmp87 - _tmp82 * _tmp88;
  _res(3, 4) = _tmp57;
  _res(4, 4) = _tmp61;
  _res(5, 4) = _tmp63;
  _res(0, 5) = -_tmp34 * _tmp86 + _tmp57 * _tmp88;
  _res(1, 5) = -_tmp40 * _tmp86 + _tmp61 * _tmp88;
  _res(2, 5) = -_tmp42 * _tmp86 + _tmp63 * _tmp88;
  _res(3, 5) = _tmp76;
  _res(4, 5) = _tmp80;
  _res(5, 5) = _tmp82;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
