// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: adjointInvMap
 *
 * Args:
 *     joint_angles: Matrix71
 *
 * Outputs:
 *     res: Matrix66
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 6> Leftuppersensoradjointinvmap(
    const Eigen::Matrix<Scalar, 7, 1>& joint_angles) {
  // Total ops: 143

  // Input arrays

  // Intermediate terms (45)
  const Scalar _tmp0 = 1 - std::cos(joint_angles(0, 0));
  const Scalar _tmp1 = 1 - Scalar(0.499999805352) * _tmp0;
  const Scalar _tmp2 = 1 - std::cos(joint_angles(1, 0));
  const Scalar _tmp3 = 1 - Scalar(0.64784630232100004) * _tmp2;
  const Scalar _tmp4 = Scalar(0.337794913398) * _tmp0;
  const Scalar _tmp5 = std::sin(joint_angles(0, 0));
  const Scalar _tmp6 = Scalar(0.52133399999999996) * _tmp5;
  const Scalar _tmp7 = _tmp4 + _tmp6;
  const Scalar _tmp8 = std::sin(joint_angles(1, 0));
  const Scalar _tmp9 = Scalar(0.80488899999999997) * _tmp8;
  const Scalar _tmp10 = Scalar(0.36863892073799998) * _tmp0;
  const Scalar _tmp11 = Scalar(0.47771400000000003) * _tmp5;
  const Scalar _tmp12 = _tmp10 - _tmp11;
  const Scalar _tmp13 = Scalar(0.47764205971399998) * _tmp2;
  const Scalar _tmp14 = _tmp1 * _tmp3 - _tmp12 * _tmp13 + _tmp7 * _tmp9;
  const Scalar _tmp15 = std::cos(joint_angles(2, 0));
  const Scalar _tmp16 = 1 - Scalar(0.35215441747600001) * _tmp2;
  const Scalar _tmp17 = Scalar(0.59342600000000001) * _tmp8;
  const Scalar _tmp18 = -_tmp1 * _tmp13 + _tmp12 * _tmp16 + _tmp17 * _tmp7;
  const Scalar _tmp19 = std::sin(joint_angles(2, 0));
  const Scalar _tmp20 = _tmp14 * _tmp15 - _tmp18 * _tmp19;
  const Scalar _tmp21 = _tmp14 * _tmp19 + _tmp15 * _tmp18;
  const Scalar _tmp22 = 1 - Scalar(1.000000719797) * _tmp2;
  const Scalar _tmp23 = -_tmp1 * _tmp9 - _tmp12 * _tmp17 + _tmp22 * _tmp7;
  const Scalar _tmp24 = _tmp10 + _tmp11;
  const Scalar _tmp25 = 1 - Scalar(0.728210975245) * _tmp0;
  const Scalar _tmp26 = Scalar(0.249048550476) * _tmp0;
  const Scalar _tmp27 = Scalar(0.70710700000000004) * _tmp5;
  const Scalar _tmp28 = _tmp26 - _tmp27;
  const Scalar _tmp29 = -_tmp13 * _tmp25 + _tmp24 * _tmp3 + _tmp28 * _tmp9;
  const Scalar _tmp30 = -_tmp13 * _tmp24 + _tmp16 * _tmp25 + _tmp17 * _tmp28;
  const Scalar _tmp31 = _tmp15 * _tmp29 - _tmp19 * _tmp30;
  const Scalar _tmp32 = _tmp15 * _tmp30 + _tmp19 * _tmp29;
  const Scalar _tmp33 = -_tmp17 * _tmp25 + _tmp22 * _tmp28 - _tmp24 * _tmp9;
  const Scalar _tmp34 = _tmp4 - _tmp6;
  const Scalar _tmp35 = 1 - Scalar(0.77178944900500002) * _tmp0;
  const Scalar _tmp36 = _tmp26 + _tmp27;
  const Scalar _tmp37 = -_tmp13 * _tmp36 + _tmp3 * _tmp34 + _tmp35 * _tmp9;
  const Scalar _tmp38 = -_tmp13 * _tmp34 + _tmp16 * _tmp36 + _tmp17 * _tmp35;
  const Scalar _tmp39 = _tmp15 * _tmp37 - _tmp19 * _tmp38;
  const Scalar _tmp40 = _tmp15 * _tmp38 + _tmp19 * _tmp37;
  const Scalar _tmp41 = -_tmp17 * _tmp36 + _tmp22 * _tmp35 - _tmp34 * _tmp9;
  const Scalar _tmp42 = -Scalar(0.046719999999999998) * _tmp31 - Scalar(0.01115) * _tmp32 -
                        Scalar(0.20200000000000001) * _tmp33;
  const Scalar _tmp43 = -Scalar(0.046719999999999998) * _tmp39 - Scalar(0.01115) * _tmp40 -
                        Scalar(0.20200000000000001) * _tmp41;
  const Scalar _tmp44 = -Scalar(0.046719999999999998) * _tmp20 - Scalar(0.01115) * _tmp21 -
                        Scalar(0.20200000000000001) * _tmp23;

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 6> _res;

  _res(0, 0) = _tmp20;
  _res(1, 0) = _tmp21;
  _res(2, 0) = _tmp23;
  _res(3, 0) = 0;
  _res(4, 0) = 0;
  _res(5, 0) = 0;
  _res(0, 1) = _tmp31;
  _res(1, 1) = _tmp32;
  _res(2, 1) = _tmp33;
  _res(3, 1) = 0;
  _res(4, 1) = 0;
  _res(5, 1) = 0;
  _res(0, 2) = _tmp39;
  _res(1, 2) = _tmp40;
  _res(2, 2) = _tmp41;
  _res(3, 2) = 0;
  _res(4, 2) = 0;
  _res(5, 2) = 0;
  _res(0, 3) = -_tmp31 * _tmp43 + _tmp39 * _tmp42;
  _res(1, 3) = -_tmp32 * _tmp43 + _tmp40 * _tmp42;
  _res(2, 3) = -_tmp33 * _tmp43 + _tmp41 * _tmp42;
  _res(3, 3) = _tmp20;
  _res(4, 3) = _tmp21;
  _res(5, 3) = _tmp23;
  _res(0, 4) = _tmp20 * _tmp43 - _tmp39 * _tmp44;
  _res(1, 4) = _tmp21 * _tmp43 - _tmp40 * _tmp44;
  _res(2, 4) = _tmp23 * _tmp43 - _tmp41 * _tmp44;
  _res(3, 4) = _tmp31;
  _res(4, 4) = _tmp32;
  _res(5, 4) = _tmp33;
  _res(0, 5) = -_tmp20 * _tmp42 + _tmp31 * _tmp44;
  _res(1, 5) = -_tmp21 * _tmp42 + _tmp32 * _tmp44;
  _res(2, 5) = -_tmp23 * _tmp42 + _tmp33 * _tmp44;
  _res(3, 5) = _tmp39;
  _res(4, 5) = _tmp40;
  _res(5, 5) = _tmp41;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
