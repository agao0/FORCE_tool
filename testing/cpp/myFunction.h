// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: myFunction
 *
 * Args:
 *     joint_angles: Matrix71
 *
 * Outputs:
 *     res: Matrix44
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 4> Myfunction(const Eigen::Matrix<Scalar, 7, 1>& joint_angles) {
  // Total ops: 222

  // Input arrays

  // Intermediate terms (77)
  const Scalar _tmp0 = std::cos(joint_angles(4, 0));
  const Scalar _tmp1 = std::sin(joint_angles(2, 0));
  const Scalar _tmp2 = 1 - std::cos(joint_angles(0, 0));
  const Scalar _tmp3 = 1 - Scalar(0.5) * _tmp2;
  const Scalar _tmp4 = 1 - std::cos(joint_angles(1, 0));
  const Scalar _tmp5 = Scalar(0.477644224418454) * _tmp4;
  const Scalar _tmp6 = -Scalar(0.36863866840506199) * _tmp2;
  const Scalar _tmp7 = std::sin(joint_angles(0, 0));
  const Scalar _tmp8 = Scalar(0.47771441710826101) * _tmp7;
  const Scalar _tmp9 = _tmp6 + _tmp8;
  const Scalar _tmp10 = 1 - Scalar(0.35216226868408801) * _tmp4;
  const Scalar _tmp11 = -Scalar(0.33779510380783001) * _tmp2;
  const Scalar _tmp12 = Scalar(0.52133380447359701) * _tmp7;
  const Scalar _tmp13 = _tmp11 - _tmp12;
  const Scalar _tmp14 = std::sin(joint_angles(1, 0));
  const Scalar _tmp15 = Scalar(0.59343261511656697) * _tmp14;
  const Scalar _tmp16 = _tmp10 * _tmp9 + _tmp13 * _tmp15 + _tmp3 * _tmp5;
  const Scalar _tmp17 = std::cos(joint_angles(2, 0));
  const Scalar _tmp18 = 1 - Scalar(0.64783773109142095) * _tmp4;
  const Scalar _tmp19 = Scalar(0.80488367550312601) * _tmp14;
  const Scalar _tmp20 = -_tmp13 * _tmp19 + _tmp18 * _tmp3 + _tmp5 * _tmp9;
  const Scalar _tmp21 = _tmp1 * _tmp16 + _tmp17 * _tmp20;
  const Scalar _tmp22 = 1 - Scalar(0.99999999977550902) * _tmp4;
  const Scalar _tmp23 = _tmp13 * _tmp22 - _tmp15 * _tmp9 + _tmp19 * _tmp3;
  const Scalar _tmp24 = std::sin(joint_angles(3, 0));
  const Scalar _tmp25 = -_tmp1 * _tmp20 + _tmp16 * _tmp17;
  const Scalar _tmp26 = std::cos(joint_angles(3, 0));
  const Scalar _tmp27 = _tmp23 * _tmp24 + _tmp25 * _tmp26;
  const Scalar _tmp28 = std::sin(joint_angles(4, 0));
  const Scalar _tmp29 = _tmp0 * _tmp21 + _tmp27 * _tmp28;
  const Scalar _tmp30 = std::cos(joint_angles(5, 0));
  const Scalar _tmp31 = std::sin(joint_angles(5, 0));
  const Scalar _tmp32 = _tmp24 * _tmp25;
  const Scalar _tmp33 = _tmp23 * _tmp26 - _tmp32;
  const Scalar _tmp34 = _tmp6 - _tmp8;
  const Scalar _tmp35 = 1 - Scalar(0.72821106431308602) * _tmp2;
  const Scalar _tmp36 = Scalar(0.249048674522937) * _tmp2;
  const Scalar _tmp37 = Scalar(0.70710678118654802) * _tmp7;
  const Scalar _tmp38 = _tmp36 - _tmp37;
  const Scalar _tmp39 = _tmp10 * _tmp35 + _tmp15 * _tmp38 + _tmp34 * _tmp5;
  const Scalar _tmp40 = _tmp18 * _tmp34 - _tmp19 * _tmp38 + _tmp35 * _tmp5;
  const Scalar _tmp41 = _tmp1 * _tmp39 + _tmp17 * _tmp40;
  const Scalar _tmp42 = -_tmp1 * _tmp40 + _tmp17 * _tmp39;
  const Scalar _tmp43 = -_tmp15 * _tmp35 + _tmp19 * _tmp34 + _tmp22 * _tmp38;
  const Scalar _tmp44 = _tmp24 * _tmp43 + _tmp26 * _tmp42;
  const Scalar _tmp45 = _tmp0 * _tmp41 + _tmp28 * _tmp44;
  const Scalar _tmp46 = _tmp24 * _tmp42;
  const Scalar _tmp47 = _tmp26 * _tmp43 - _tmp46;
  const Scalar _tmp48 = _tmp36 + _tmp37;
  const Scalar _tmp49 = 1 - Scalar(0.77178893568691498) * _tmp2;
  const Scalar _tmp50 = _tmp11 + _tmp12;
  const Scalar _tmp51 = _tmp10 * _tmp48 + _tmp15 * _tmp49 + _tmp5 * _tmp50;
  const Scalar _tmp52 = _tmp18 * _tmp50 - _tmp19 * _tmp49 + _tmp48 * _tmp5;
  const Scalar _tmp53 = _tmp1 * _tmp51 + _tmp17 * _tmp52;
  const Scalar _tmp54 = -_tmp1 * _tmp52 + _tmp17 * _tmp51;
  const Scalar _tmp55 = -_tmp15 * _tmp48 + _tmp19 * _tmp50 + _tmp22 * _tmp49;
  const Scalar _tmp56 = _tmp24 * _tmp55 + _tmp26 * _tmp54;
  const Scalar _tmp57 = _tmp0 * _tmp53 + _tmp28 * _tmp56;
  const Scalar _tmp58 = _tmp24 * _tmp54;
  const Scalar _tmp59 = _tmp26 * _tmp55 - _tmp58;
  const Scalar _tmp60 = std::cos(joint_angles(6, 0));
  const Scalar _tmp61 = _tmp0 * _tmp27 - _tmp21 * _tmp28;
  const Scalar _tmp62 = std::sin(joint_angles(6, 0));
  const Scalar _tmp63 = _tmp29 * _tmp31;
  const Scalar _tmp64 = _tmp30 * _tmp33 - _tmp63;
  const Scalar _tmp65 = _tmp31 * _tmp45;
  const Scalar _tmp66 = _tmp30 * _tmp47 - _tmp65;
  const Scalar _tmp67 = _tmp0 * _tmp44 - _tmp28 * _tmp41;
  const Scalar _tmp68 = _tmp31 * _tmp57;
  const Scalar _tmp69 = _tmp30 * _tmp59 - _tmp68;
  const Scalar _tmp70 = _tmp0 * _tmp56 - _tmp28 * _tmp53;
  const Scalar _tmp71 = _tmp61 * _tmp62;
  const Scalar _tmp72 = _tmp62 * _tmp67;
  const Scalar _tmp73 = _tmp62 * _tmp70;
  const Scalar _tmp74 = Scalar(0.58030000000000004) - Scalar(0.58030000000000004) * _tmp30;
  const Scalar _tmp75 = Scalar(0.58030000000000004) - Scalar(0.58030000000000004) * _tmp60;
  const Scalar _tmp76 = Scalar(0.30359999999999998) - Scalar(0.30359999999999998) * _tmp26;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 4> _res;

  _res(0, 0) = _tmp29 * _tmp30 + _tmp31 * _tmp33;
  _res(1, 0) = _tmp30 * _tmp45 + _tmp31 * _tmp47;
  _res(2, 0) = _tmp30 * _tmp57 + _tmp31 * _tmp59;
  _res(3, 0) = 0;
  _res(0, 1) = _tmp60 * _tmp61 + _tmp62 * _tmp64;
  _res(1, 1) = _tmp60 * _tmp67 + _tmp62 * _tmp66;
  _res(2, 1) = _tmp60 * _tmp70 + _tmp62 * _tmp69;
  _res(3, 1) = 0;
  _res(0, 2) = _tmp60 * _tmp64 - _tmp71;
  _res(1, 2) = _tmp60 * _tmp66 - _tmp72;
  _res(2, 2) = _tmp60 * _tmp69 - _tmp73;
  _res(3, 2) = 0;
  _res(0, 3) = -_tmp23 * _tmp76 - Scalar(0.30359999999999998) * _tmp32 - _tmp33 * _tmp74 -
               Scalar(0.58030000000000004) * _tmp63 - _tmp64 * _tmp75 -
               Scalar(0.58030000000000004) * _tmp71;
  _res(1, 3) = -_tmp43 * _tmp76 - Scalar(0.30359999999999998) * _tmp46 - _tmp47 * _tmp74 -
               Scalar(0.58030000000000004) * _tmp65 - _tmp66 * _tmp75 -
               Scalar(0.58030000000000004) * _tmp72;
  _res(2, 3) = -_tmp55 * _tmp76 - Scalar(0.30359999999999998) * _tmp58 - _tmp59 * _tmp74 -
               Scalar(0.58030000000000004) * _tmp68 - _tmp69 * _tmp75 -
               Scalar(0.58030000000000004) * _tmp73;
  _res(3, 3) = 1;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
