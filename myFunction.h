// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: myFunction
 *
 * Args:
 *     joint_angles: Matrix41
 *
 * Outputs:
 *     res: Matrix44
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 4> Myfunction(const Eigen::Matrix<Scalar, 4, 1>& joint_angles) {
  // Total ops: 91

  // Input arrays

  // Intermediate terms (35)
  const Scalar _tmp0 = std::sin(joint_angles(0, 0));
  const Scalar _tmp1 = 1 - std::cos(joint_angles(0, 0));
  const Scalar _tmp2 = _tmp0 + _tmp1;
  const Scalar _tmp3 = 1 - std::cos(joint_angles(1, 0));
  const Scalar _tmp4 = 1 - 8 * _tmp3;
  const Scalar _tmp5 = -_tmp0 + _tmp1;
  const Scalar _tmp6 = 4 * _tmp3;
  const Scalar _tmp7 = 2 * std::sin(joint_angles(1, 0));
  const Scalar _tmp8 = _tmp6 - _tmp7;
  const Scalar _tmp9 = 1 - 2 * _tmp1;
  const Scalar _tmp10 = _tmp6 + _tmp7;
  const Scalar _tmp11 = _tmp10 * _tmp9 + _tmp2 * _tmp4 + _tmp5 * _tmp8;
  const Scalar _tmp12 = 1 - std::cos(joint_angles(2, 0));
  const Scalar _tmp13 = 9 * _tmp12;
  const Scalar _tmp14 = 3 * std::sin(joint_angles(2, 0));
  const Scalar _tmp15 = _tmp13 - _tmp14;
  const Scalar _tmp16 = _tmp10 * _tmp2 + _tmp4 * _tmp5 + _tmp8 * _tmp9;
  const Scalar _tmp17 = _tmp13 + _tmp14;
  const Scalar _tmp18 = 1 - 18 * _tmp12;
  const Scalar _tmp19 = _tmp10 * _tmp5 + _tmp2 * _tmp8 + _tmp4 * _tmp9;
  const Scalar _tmp20 = _tmp11 * _tmp15 + _tmp16 * _tmp17 + _tmp18 * _tmp19;
  const Scalar _tmp21 = 1 - std::cos(joint_angles(3, 0));
  const Scalar _tmp22 = 16 * _tmp21;
  const Scalar _tmp23 = 4 * std::sin(joint_angles(3, 0));
  const Scalar _tmp24 = _tmp22 - _tmp23;
  const Scalar _tmp25 = _tmp11 * _tmp18 + _tmp15 * _tmp16 + _tmp17 * _tmp19;
  const Scalar _tmp26 = _tmp22 + _tmp23;
  const Scalar _tmp27 = _tmp11 * _tmp17 + _tmp15 * _tmp19 + _tmp16 * _tmp18;
  const Scalar _tmp28 = 1 - 32 * _tmp21;
  const Scalar _tmp29 = _tmp20 * _tmp24 + _tmp25 * _tmp26 + _tmp27 * _tmp28;
  const Scalar _tmp30 = _tmp20 * _tmp26 + _tmp24 * _tmp27 + _tmp25 * _tmp28;
  const Scalar _tmp31 = _tmp20 * _tmp28 + _tmp24 * _tmp25 + _tmp26 * _tmp27;
  const Scalar _tmp32 = 2 * _tmp29 + 3 * _tmp30 + _tmp31;
  const Scalar _tmp33 = 3 * _tmp29 + _tmp30 + 2 * _tmp31;
  const Scalar _tmp34 = _tmp29 + 2 * _tmp30 + 3 * _tmp31;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 4> _res;

  _res(0, 0) = _tmp32;
  _res(1, 0) = _tmp33;
  _res(2, 0) = _tmp34;
  _res(3, 0) = 0;
  _res(0, 1) = _tmp32;
  _res(1, 1) = _tmp33;
  _res(2, 1) = _tmp34;
  _res(3, 1) = 0;
  _res(0, 2) = _tmp32;
  _res(1, 2) = _tmp33;
  _res(2, 2) = _tmp34;
  _res(3, 2) = 0;
  _res(0, 3) = _tmp32;
  _res(1, 3) = _tmp33;
  _res(2, 3) = _tmp34;
  _res(3, 3) = 1;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
